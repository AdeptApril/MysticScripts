# -*- coding: CP437 -*-

## This is a modified version of the testpython.mpy file
## The intent is to eventually only have functions made by April,
## but this is meant as a quick-start sort of thing in order to
## start seeing how the BBS handles various Python code.

##############################################################
## INITIALIZE BBS FUNCTIONS AND DEFINE ANY GLOBAL VARIABLES ##
##############################################################

from mystic_bbs import *

import os, os.path, sys, fnmatch, glob, re
import time, socket, errno, string, platform, traceback

KEY_UP       = chr(72)       # Some keyboard code defines returned by input functions
KEY_DOWN     = chr(80)
KEY_ESCAPE   = chr(27)
KEY_ENTER    = chr(13)
KEY_TAB      = chr(9)
KEY_LEFT     = chr(75)
KEY_RIGHT    = chr(77)

user_deleted = int("00000004")  # user deleted flag from records.pas

thisuser = getuser(0);    # read the currently logged in user into thisuser

################################
## CUSTOM FUNCTION: Lightning Bolt ##
################################
def lightning_bolt():
	
	n = 9
	count = 0
	#write(input)

	while count <= n:
		write('|[X1' + str(count%10) + '|[Y1' + str(count%10) + '|16|14' + chr(219))
		delay(1)
		stuffkey("A") #The stuffkey/getkey is a kludge to get fTerm to update
		getkey()
		count = count + 1
	
	count = 0
	while count <= n:
		write('|[X1' + str(count%10) + '|[Y1' + str(count%10) + '|16|00' + chr(219))
		delay(1)
		stuffkey("A") #The stuffkey/getkey is a kludge to get fTerm to update
		getkey()
		count = count + 1
		
	write("|07*PAUSE*")
 
	ch = onekey(chr(13) + 'Q', False)
 	# after getting input, erase the pause prompt then process the input
 	backspace(wherex(), True)

################################
## CUSTOM FUNCTION: Count to n ##
################################
# Note: This currently only seems to work locally, as, e.g., using fTerm at 
# bbs.stormbbs.com results in the count not appearing until the count has
# finished.
def count_to_n():
	
	write('|CR|09Type a number to count to: ')

	input = getstr(11, 40, 120, "10")
	n = 100
	count = 0
	#write(input)

	#try: #This try/except loop does not seem to work
	while count <= int(input):
		write('|[X01|[Y02|16|12' + str(count))
		delay(5)
		#writeln(str(count))
		stuffkey("A")
		getkey()
		count = count + 1
	#except (KeyboardInterrupt):
	#	count = int(input)
	#	pass
		
	writeln('')
	writeln('Count Finished')
	write("|07*PAUSE*")
 
	ch = onekey(chr(13) + 'Q', False)
 	# after getting input, erase the pause prompt then process the input
 	backspace(wherex(), True)

################################
## CUSTOM FUNCTION: Go ##
################################
# Attempting to make a correspondance Go (Weiqi, Baduk) program
# First step: Display Go board of a certain size
def play_go():

	write('|CL|CR|09What is the width of the board? ')
	width = int(getstr(11, 40, 120, "3"))
	writeln("|00|16|CL")

	n = width * 2 - 1
	row = 1
	col = 1
	count = 0
	#write(input)

	while(row <= n+1):
		#This version works up through 12 lines on a 25-line screen.
		#larger boards should not have the spaces and - characters
		count = count + 1
		if(row == n+1 and col == n):
			writeln(chr(ord('A') + col - 1))
		elif(row == n+1):
			write(chr(ord('A') + col - 1))
		elif( row == 1 and col == 1):
			write("|00|22+")
			#write("|00|22" + str(count))
		elif( col == n):
			writeln("+" + str(row))
		elif( row % 2 == 1 and col % 2 == 1 ):
			write("+")
		elif( row % 2 == 1):
			write("-")
		elif(col % 2 == 1):
			write("+")
		else:
			write(" ")
			
		#move on to the next character
		col = col + 1
		if(col > n):
			#writeln()
			col = 1
			row = row + 1
		
	writeln('')
	writeln('Board displayed')
	write("|07*PAUSE*")
 
	ch = onekey(chr(13) + 'Q', False)
 	# after getting input, erase the pause prompt then process the input
 	backspace(wherex(), True)


################################
## CUSTOM FUNCTION: DISPLAY FUNCTION RESULTS ##
################################

def function_results():

	writeln("|15|16|CL|17 Testing functions |16|CR")

	writeln("getcfg: ")
	temp = getcfg()
	writeln(str(temp))
	writeln()
	
	writeln("getfbase: ")
	temp = getfbase()
	writeln(str(temp))
	writeln()
	 
	writeln("getfbaseid: ")
	temp = getfbaseid()
	writeln(str(temp))
	writeln()

	writeln("getfgroup: ")
	temp = getfgroup()
	writeln(str(temp))
	writeln()
	
	writeln("getfgroupid: ")
	temp = getfgroupid()
	writeln(str(temp))
	writeln()

	writeln("getkey: ")
	temp = getkey()
	writeln(str(temp))
	writeln()

	writeln("getmbase: ")
	temp = getmbase()
	writeln(str(temp))
	writeln()

	writeln("getmbaseid: ")
	temp = getmbaseid()
	writeln(str(temp))
	writeln()

	writeln("getmgroup: ")
	temp = getmgroup()
	writeln(str(temp))
	writeln()

	writeln("getmgroupid: ")
	temp = getmgroupid()
	writeln(str(temp))
	writeln()

	#writeln("getnetaddr: ")
	#temp = getnetaddr()
	#writeln(str(temp))
	#writeln()

	writeln("getprompt: ")
	temp = getprompt()
	writeln(str(temp))
	writeln()

	writeln("getstr: ")
	temp = getstr()
	writeln(str(temp))
	writeln()

	#getuser() and getuserid() result in infinite loops, though data does display
	#writeln("getuser: ")
	#temp = getuser()
	#writeln(str(temp))
	#writeln()

	#writeln("getuserid: ")
	#temp = getuserid()
	#writeln(str(temp))
	#writeln()

	writeln("getyn: ")
	temp = getyn()
	writeln(str(temp))
	writeln()

	write("|CR|14Done!|CR|CR|PA")



################################
## CUSTOM FUNCTION: USER LIST ##
################################

def show_user_list():

	writeln("|15|16|CL|17 Python Demonstration Program > User Listing|$X79 |16|CR")

	count = 1
	user  = getuser(count)
	shown = 0

	while not user is None:

		if not user["flags"] & user_deleted:

			writeln(user["handle"])
			shown = shown + 1

		count = count + 1
		user  = getuser(count)	

	write("|CR|14Listed |15" + str(shown) + " |14user(s)|CR|CR|PA")



################################
## CUSTOM FUNCTION: BOX DEMO  ##
################################

def do_box_demo():

	box = box_options()

	box["header"]  = " Demo Box "
	box["restore"] = False

	writeln(str(box["attr1"]) + "|PN")

	#box_open  (box, 20, 3, 60, 9)
	#box_close (box)


#################################
## CUSTOM FUNCTION: INPUT DEMO ##
#################################

def do_input_demo():

	writeln("|15|16|CL|17 Python Demonstration Program > Input Demo|$X79 |16")

	write('|CR|09Type a string: ');

	input = getstr(11, 40, 120, "Default");

	writeln("|CR|13Enter characters and press |05[|15ESCAPE|15|05] |13when done:|07|CR")

	while not shutdown():

		char, extended = getkey();

		if extended:

			if char == KEY_UP:
				writeln("you pressed up arrow");
			elif char == KEY_DOWN:
				writeln("you pressed down arrow");
			elif char == KEY_LEFT:
				writeln("you pressed left arrow");
			elif char == KEY_RIGHT:
				writeln("you pressed right arrow");
			else:
				writeln("You pressed extended key #" + str(ord(char)))

		else:
			if char == KEY_ESCAPE:
				writeln("you pressed ESCAPE");
				break;
			elif char == KEY_ENTER:
				writeln("you pressed enter");
			elif char == KEY_TAB:
				writeln("you pressed tab");
			else:
				writeln("you pressed character " + char);


################################
## CUSTOM FUNCTION: MAIN MENU ##
################################

def show_main_menu():

	while not shutdown():

		writeln("|15|16|CL|17 Python Demonstration Program > Main Menu|$X79 |16")

		writeln("|CR|15Hello, |14" + thisuser["handle"] + " #" + str(thisuser["id"]) + "|15!  Please select one of the following options:|CR")
		writeln("  |09(|11I|09) Input Demo")
		writeln("  |09(|11U|09) User List")
		writeln("  |09(|11C|09) Count to n")
		writeln("  |09(|11G|09) Play Go")
		writeln("  |09(|11F|09) Function Testing")
		writeln("  |09(|11L|09) Lightning Bolt")
		write  ("|CREnter option (|11Q|09/|11Quit|09): |11")

		# get one character input using defined list of valid keys

		char = onekey("CFGILQU", True)

		if char == "I":
			do_input_demo()

		if char == "Q":
			break

		if char ==  "U":
			show_user_list()

		if char == "C":
		    count_to_n()

		if char == "G":
		    play_go()
			
		if char == "F":
			function_results()
			
		if char == "L":
			lightning_bolt()
		

###################################
## PROGRAM EXECUTION BEGINS HERE ##
###################################

show_main_menu()

writeln("|CR|14Demo complete! |PA");
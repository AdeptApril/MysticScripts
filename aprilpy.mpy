# -*- coding: CP437 -*-

## This is a modified version of the testpython.mpy file
## The intent is to eventually only have functions made by April,
## but this is meant as a quick-start sort of thing in order to
## start seeing how the BBS handles various Python code.

##############################################################
## INITIALIZE BBS FUNCTIONS AND DEFINE ANY GLOBAL VARIABLES ##
##############################################################

from mystic_bbs import *
import random
#import numpy # For use to make 2D arrays (e.g., a = numpy.empty((10,10)); a.fill(foo))
#import ctypes

#The following were used in the MRC client, and leaving them for a bit as
#a possible prompt for future ideas
#import os, os.path, sys, fnmatch, glob, re
#import time, socket, errno, string, platform, traceback

KEY_UP       = chr(72)       # Some keyboard code defines returned by input functions
KEY_DOWN     = chr(80)
KEY_ESCAPE   = chr(27)
KEY_ENTER    = chr(13)
KEY_TAB      = chr(9)
KEY_LEFT     = chr(75)
KEY_RIGHT    = chr(77)

#The following were used in the user list item from testpython.mpy, but
#Are not currently used anywhere in here.
#user_deleted = int("00000004")  # user deleted flag from records.pas
thisuser = getuser(0);    # read the currently logged in user into thisuser

################################
## CUSTOM FUNCTION: Lightning Bolt attempt 1 - proof of concept##
################################
def lightning_bolt1():
	
	n = 9
	count = 0
	#write(input)
	#TODO: Idea - Use random.randint(1,11), and if it's 1 to 7, go down,
	#8 to 10, go right (maybe some other version that splits)
	#And then store the numbers in a 2D array, so that it can be blacked out afterward
	#Perhaps just make the 2D array directly (easier to add the '0' if needed, rather than hard coding it), then iterate through the array twice.

	while count <= n:
		write('|[X1' + str(count%10) + '|[Y1' + str(count%10) + '|16|14' + chr(219))
		delay(1)
		stuffkey("A") #The stuffkey/getkey is a kludge to get fTerm to update
		getkey()
		count = count + 1
	
	count = 0
	while count <= n:
		write('|[X1' + str(count%10) + '|[Y1' + str(count%10) + '|16|00' + chr(219))
		delay(1)
		stuffkey("A") #The stuffkey/getkey is a kludge to get fTerm to update
		getkey()
		count = count + 1
		
	write("|07*PAUSE*")
 
	ch = onekey(chr(13) + 'Q', False)
 	# after getting input, erase the pause prompt then process the input
 	backspace(wherex(), True)

################################
## CUSTOM FUNCTION: Lightning Bolt attempt2##
################################
# Take a start point and end point (perhaps eventually with user input)
# Create an array that's a set of points

#Including some enums (or whatever python calls #define-type things) here because of assuming this'll be broken out into its own file eventually
MAX_X = 79 # Column not to go past on the right side of the screen
MAX_LENGTH = 10 # Max loops of the while loop creating the bolt placement. Failsafe.

def lightning_bolt():
	
	i = 0
	startx = random.randint(0,80)	
	starty = random.randint(0,15) 	#Point to display first 
	currx = startx	#
	curry = starty 	# Current point on way to endx/y
	endx = random.randint(0,80)	#
	endy = random.randint(starty + 1, 23)	#Point to end up at
	pointlist = [startx, starty]	#array starting with the start values. Will contain all points of the bolt
									#Could have another list with the characters being overwritten, with the intent of putting them back
	left_chance = 1		#Idea is to have a random number from 1 to 10, if it's <= left_chance, bolt will go left
	right_chance = 6	#if it's >= right_chance, bolt will go right, between the two it stays centered
	down_chance = 9		#random number between 1 and 10, will go down if <= down_chance
	
	#Randomly move the currx/y until arriving at the end point, appending to pointlist as it goes along
	while( curry <= endy and i < MAX_LENGTH):
		i = i + 1
		#Generate random numbers for left/right/down_chance
		rollx = random.randint(1,11)
		rolly = random.randint(1,11)
		
		#Move currx appropriately
		if(rollx <= left_chance and currx > 0):
			currx = currx - 1
		elif(rollx >= right_chance and currx < MAX_X):
			currx = currx + 1
		#else:				#Default is to stay in the center
		#	currx = currx
		
		#Move curry appropriately
		if(rolly <= down_chance and (curry <= endy-1 or currx == endx or currx + 1 == endx or currx - 1 == endx)):
			curry = curry + 1
		#else:				#Default is to stay on the same line (yes this means that currx and curry might not change, and could be wasteful.
		
		#add results to pointlist
		pointlist.append(currx)
		pointlist.append(curry)
		
		#Further adjustments (if desired)
		#Perhaps change left/right/down_chance depending on where currx/y are in comparison to endx/y
		
		#Make it more likely to go toward endx if greater than 5 columns away
		if(currx + 5 < endx):
			left_chance = left_chance - 1
			right_chance = right_chance - 1
		elif(currx - 5 > endx):
			left_chance = left_chance + 1
			right_chance = right_chance + 1
		#...but if within 2 columns, default to a central number
		elif(currx + 2 >= endx and currx - 2 <= endx):
			left_chance = 3
			right_chance = 8
		
		#If next to the last line, make sure x is going the right way
		if(curry + 1 >= endy):
			if(currx < endx):
				left_chance = -1
				right_chance = 0
			elif(currx > endx):
				left_chance = 10
				right_chance = 11
		
	
	#Write out the lightning bolt 
	i = 0
	xval = '0'
	yval = '0'
	while(i < len(pointlist)):
		if(pointlist[i] < 10):
			xval = '0' + str(pointlist[i])
		else:
			xval = str(pointlist[i])
			
		if(pointlist[i + 1] < 10):
			yval = '0' + str(pointlist[i+1])
		else:
			yval = str(pointlist[i+1])
			
		write('|[X' + xval + '|[Y' + yval + '|16|14' + chr(219))
		delay(1)
		stuffkey("A") #The stuffkey/getkey is a kludge to get fTerm to update
		getkey()
		i = i + 2
	
	#Erase the lightning bolt
	i = 0
	xval = '0'
	yval = '0'
	while(i < len(pointlist)):
		if(pointlist[i] < 10):
			xval = '0' + str(pointlist[i])
		else:
			xval = str(pointlist[i])
			
		if(pointlist[i + 1] < 10):
			yval = '0' + str(pointlist[i+1])
		else:
			yval = str(pointlist[i+1])
			
		write('|[X' + xval + '|[Y' + yval + '|16|00' + chr(219))
		delay(1)
		stuffkey("A") #The stuffkey/getkey is a kludge to get fTerm to update
		getkey()
		i = i + 2
	
	#Finish/exit
	#write("|07*PAUSE*")
	#ch = onekey(chr(13) + 'Q', False)
 	# after getting input, erase the pause prompt then process the input
 	#backspace(wherex(), True)

################################
## CUSTOM FUNCTION: Count to n ##
################################
# Note: This currently only seems to work locally, as, e.g., using fTerm at 
# bbs.stormbbs.com results in the count not appearing until the count has
# finished.
def count_to_n():
	
	write('|CR|09Type a number to count to: ')

	input = getstr(11, 40, 120, "10")
	n = 100
	count = 0
	#write(input)

	#try: #This try/except loop does not seem to work
	while count <= int(input):
		write('|[X01|[Y02|16|12' + str(count))
		delay(5)
		#writeln(str(count))
		stuffkey("A")
		getkey()
		count = count + 1
	#except (KeyboardInterrupt):
	#	count = int(input)
	#	pass
		
	writeln('')
	writeln('Count Finished')
	write("|07*PAUSE*")
 
	ch = onekey(chr(13) + 'Q', False)
 	# after getting input, erase the pause prompt then process the input
 	backspace(wherex(), True)

################################
## CUSTOM FUNCTION: Go ##
################################
# Attempting to make a correspondance Go (Weiqi, Baduk) program
# First step: Display Go board of a certain size - Done
# Second step: Display black pieces on board when given coordinates
# Step: switch color after each move
# Step: keep track of moves in game - perhaps use SGF format
# Known issues:
# any size board allowed, some would not work, and incorrect input will crash the program
# Combinations other than A## for move_pos will return bad input (And also should check for positions not on the board)
def play_go():
	
	write('|CL|CR|09What is the width of the board? ')
	width = int(getstr(11, 40, 120, "3"))
	if(width < 3 or width > 23):
		gotoxy(1,3) #TODO: get rid of the magic numbers
		write("Board size should be between 3 and 23. Returning.|PA")
		return
	write("|00|16|CL")

	#TODO: Create a 2d array of ANSI characters for the board at any given position
	#Probably have this as a return from the display_base_board function (though the name might be off, then)
	#This would allow for correcting the board after taking a piece
	#This could be done in a ton of other ways (including ones that take less memory)
	baseboard = display_base_board(width)
	color_of_move = "black" #Could probably do a boolean switch (color_of_move = !color_of_move), but not sure how Python handles that.
	while(True):
		gotoxy(27, 1)
		move_pos = getstr(11, 5, 5, "A1")
		if(move_pos.upper() == 'Q'):
			break
		col = move_pos[0].upper()
		row = move_pos[1:]
		#if outside bounds, continue loop
		if(ord(col) - 64 < 1 or ord(col) - 64 > width or int(row) < 1 or int(row) > width):
			gotoxy(27,2) #TODO: get rid of the magic numbers
			write("Position not on board. Please try another")
			continue
		#writeln("Move position: " + col + " " + row)
		place_stone(int_to_2str(ord(col) - 64), int_to_2str(int(row)), color_of_move)
		if(color_of_move == "black"):
			color_of_move = "white"
		else:
			color_of_move = "black"
	 
	#ch = onekey(chr(13) + 'Q', False)
 	# after getting input, erase the pause prompt then process the input
 	#backspace(wherex(), True)

def is_legal_move(board, width):
	return True

def place_stone(col, row, color):
	gotoxy(27,2) #TODO: get rid of the magic numbers
	write("Move position: " + color + " at " + col + " " + row)
	if(color == "black"):
		write('|[X' + col + '|[Y' + row + '|22|00' + chr(254))
	elif(color == "white"):
		write('|[X' + col + '|[Y' + row + '|22|15' + chr(254))

def display_base_board(width):
	board = 0 #TODO: This is wrong, but numpy isn't working quite yet, so delaying the feature for now
	#board = numpy.empty((width, width))
	#board.fill("|00|22" + chr(197))
	n = width
	row = 1
	col = 1
	count = 0
	#write(input)
	while(row <= n+1):
		#larger boards should not have the spaces and - characters
		count = count + 1
		#last letter in the bottom row
		if(row == n+1 and col == n):
			writeln(chr(ord('A') + col - 1))
		#last row (all letters)
		elif(row == n+1):
			write(chr(ord('A') + col - 1))
		#top-left corner
		elif( row == 1 and col == 1):
			write("|00|22" + chr(218))
		#top-right corner of board
		elif( row == 1 and col == n):
			writeln("|00|22" + chr(191) + str(row))
		#bottom-left corner of board
		elif( row == n and col == 1):
			write("|00|22" + chr(192))
		#bottom-right corner of board
		elif( row == n and col == n):
			writeln("|00|22" + chr(217) + str(row))
		#bottom row, normal column of board
		elif( row == n):
			write("|00|22" + chr(193))
		#top row, normal column of board
		elif( row == 1 ):
			write("|00|22" + chr(194))
		#right side
		elif( col == n):
			writeln("|00|22" + chr(180) + str(row))
		#left side
		elif( col == 1):
			write("|00|22" + chr(195))
		#normal row/column
		else:
			write("|00|22" + chr(197))
			
		#move on to the next character
		col = col + 1
		if(col > n):
			#writeln()
			col = 1
			row = row + 1
		
	#writeln('')
	#writeln('Board displayed')
	#write("|07*PAUSE*")
	return board

#Convert int to 2-digit string
def int_to_2str(num):
	if(num < 10):
		return '0' + str(num)
	else:
		return str(num)

################################
## CUSTOM FUNCTION: DISPLAY FUNCTION RESULTS ##
################################

def function_results():

	writeln("|15|16|CL|17 Testing functions |16|CR")

	writeln("getcfg: ")
	temp = getcfg()
	writeln(str(temp))
	writeln()
	
	writeln("getfbase: ")
	temp = getfbase()
	writeln(str(temp))
	writeln()
	 
	writeln("getfbaseid: ")
	temp = getfbaseid()
	writeln(str(temp))
	writeln()

	writeln("getfgroup: ")
	temp = getfgroup()
	writeln(str(temp))
	writeln()
	
	writeln("getfgroupid: ")
	temp = getfgroupid()
	writeln(str(temp))
	writeln()

	writeln("getkey: ")
	temp = getkey()
	writeln(str(temp))
	writeln()

	writeln("getmbase: ")
	temp = getmbase()
	writeln(str(temp))
	writeln()

	writeln("getmbaseid: ")
	temp = getmbaseid()
	writeln(str(temp))
	writeln()

	writeln("getmgroup: ")
	temp = getmgroup()
	writeln(str(temp))
	writeln()

	writeln("getmgroupid: ")
	temp = getmgroupid()
	writeln(str(temp))
	writeln()

	#writeln("getnetaddr: ")
	#temp = getnetaddr()
	#writeln(str(temp))
	#writeln()

	writeln("getprompt: ")
	temp = getprompt()
	writeln(str(temp))
	writeln()

	writeln("getstr: ")
	temp = getstr()
	writeln(str(temp))
	writeln()

	#getuser() and getuserid() result in infinite loops, though data does display
	#writeln("getuser: ")
	#temp = getuser()
	#writeln(str(temp))
	#writeln()

	#writeln("getuserid: ")
	#temp = getuserid()
	#writeln(str(temp))
	#writeln()

	writeln("getyn: ")
	temp = getyn()
	writeln(str(temp))
	writeln()

	write("|CR|14Done!|CR|CR|PA")

################################
## CUSTOM FUNCTION: MAIN MENU ##
################################

def show_main_menu():

	while not shutdown():

		writeln("|15|16|CL|17 April's Python Testing Ground > Main Menu|$X79 |16")

		writeln("|CR|15Hello, |14" + thisuser["handle"] + " #" + str(thisuser["id"]) + "|15!  Please select one of the following options:|CR")
		writeln("  |09(|11C|09) Count to n")
		writeln("  |09(|11G|09) Play Go")
		writeln("  |09(|11F|09) Function Testing")
		writeln("  |09(|11L|09) Lightning Bolt")
		write  ("|CREnter option (|11Q|09/|11Quit|09): |11")

		# get one character input using defined list of valid keys

		char = onekey("CFGLQ", True)

		if char == "Q":
			break

		if char == "C":
		    count_to_n()

		if char == "G":
		    play_go()
			
		if char == "F":
			function_results()
			
		if char == "L":
			for x in range(0,3):
				lightning_bolt()
		

###################################
## PROGRAM EXECUTION BEGINS HERE ##
###################################

show_main_menu()

writeln("|CR|14Demo complete! |PA");
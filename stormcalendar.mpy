# -*- coding: CP437 -*-

# # DAILY CALENDAR DISPLAY FOR MYSTIC BBS
# # By April Monoceros / Adept from Storm BBS (stormbbs.com)
# # Version ? (Not yet released)
# #
# # The program displays a different ANSI screen depending on the month, particular date, particular day of the
# # week in a month (E.g., US Thanksgiving), or special day (e.g. Easter)
# # Easter is the western Easter and defined through 2030
# # In reverse order of preference, the chosen ANSI is none, monthly default, particular day of month, particular day of
# # cardinal week, special ANSI.
# #
# # Naming convention for ANSI files:
# # nMMDDName
# #  - MM: 2 digit month  - DD: 2 digit day  - Name: Anything, but ignored
# # cMMWDName
# #  - 'c' signifies cardinal week, MM a 2-digit month, W is which week, and D is which day of the week. So American
# #   Thanksgiving starts c1143, being in the 11th month (November), the 4th week, and on Thursday (Monday = 0,
# #   Thursday = 3, Sunday = 6). Monday is 0 because that's how datetime treats it in Python.
# # sName - 's' for "special". Initially this is for easter, but could be for one-off events, other moon-related days,
# #     or equinoxes and solstices. This is one time when "Name" will be highly important
# # dMM - Default ANSI for the month
# #
# # Note on ANSI formatting -- Save without sauce, or it'll flash by in some situations, and maxing out at 23 lines
# # looks better.

# #############################################################
# # INITIALIZE BBS FUNCTIONS AND DEFINE ANY GLOBAL VARIABLES ##
# #############################################################

from mystic_bbs import *
from datetime import date
import calendar
import os
# Import re module to use regular expression
import re

# Replacement identifiers (Must be constants, in caps, with _ for spaces rather than camelCase.
LOCATION = './themes/default/scripts/stormcal/'  # Directory that the calendar ANSIs are stored in

# ###############################
# # Calendar                   ##
# ###############################


def stormcal():
    chosen_ansi = 'none'

    # Determine what day it is and set the related variables
    today = date.today()
    year = '{:%Y}'.format(today)
    month = '{:%m}'.format(today)
    month_english = calendar.month_name[today.month]
    day = '{:%d}'.format(today)
    day_of_week = str(today.weekday())
    day_of_week_english = calendar.day_name[today.weekday()]  # So '2' should be "Wednesday"
    week_of_month = str((today.day // 7) + 1)  # So the 7th would still be the 1st week, 8th would be the 2nd week.

    # Test to see what the system says all the variables are
    # writeln('year ' + year + ' month ' + month + '(' + month_english + ') day ' + day
    #         + ', day of week ' + str(day_of_week) + '(' + day_of_week_english + '), week of month '
    #         + str(week_of_month))
    # writeln("|CR|PA")  #This pauses

    # write out all the files in the stormcal directory
    files_in_dir = []

    # r=>root, d=>directories, f=>files
    # Starting from the set LOCATION, finding all .ans files
    for r, d, f in os.walk(LOCATION):
        for item in f:
            if '.ans' in item:
                files_in_dir.append(os.path.join(r, item))

    # writeln("The default ANSI for " + month_english)
    monthly_ansi = dFilter(files_in_dir, month)
    for item in monthly_ansi:
        chosen_ansi = item

    # Look to see if there's any ANSIs for that day
    # writeln("Now the list of ANSIs for " + month_english + " " + day)
    daily_ansi = nFilter(files_in_dir, month, day)
    for item in daily_ansi:
        # writeln(item)
        chosen_ansi = item
    # writeln("|CR|PA")

    # Look to see if there's any ANSIs for that day of that week of that month (e.g., 4th Thursday in November)
    cardinal_ansi = cFilter(files_in_dir, month, week_of_month, day_of_week)
    for item in cardinal_ansi:
        chosen_ansi = item

    # Checking to see if it's Easter -- Add similar functions if there are other special days
    if today_is_easter(year, month, day):
        special_ansi = sFilter(files_in_dir, "Easter")
        for item in special_ansi:
            chosen_ansi = item

    # If still nothing found, print error message
    if chosen_ansi == 'none':
        writeln("No ANSI found for today. Today's date is: ")

    # display the ANSI
    if chosen_ansi != 'none':
        f = open(chosen_ansi, 'r')
        file_contents = f.read()
        writeln("")
        write (file_contents)
        f.close()

    # display the date
    write('|[X01|[Y23|16|14 ' + day_of_week_english + ', ' + month_english + ' ' + day)
    writeln("|CR|PA")


# Filter function to get the daily(n) ANSIs - nMMDDPPName
def nFilter(datalist, month, day):
    # Look for the items, using regex, that start with n and the current month and date
    return [val for val in datalist
            if re.search(r'^' + LOCATION + 'n' + month + day, val)]


# Filter function to get the cardinal(c) / x day in x week ANSIs - cMMWDPPName
def cFilter(datalist, month, week_num, weekday_num):
    # Look for the items, using regex, that start with c and the month, cardinal week, and weekday
    return [val for val in datalist
            if re.search(r'^' + LOCATION + 'c' + month + week_num + weekday_num, val)]


# Filter function to get the special(s) ANSIs - sPPName
def sFilter(datalist, name):
    # Look for the items, using regex, that start with s and match the given name (e.g., "Easter")
    return [val for val in datalist
            if re.search(r'^' + LOCATION + 's' + re.escape(name), val)]


# Filter function to get the default ANSI for the month - dMM
def dFilter(datalist, month):
    # Look for the items, using regex, that start with d and the month
    return [val for val in datalist
            if re.search(r'^' + LOCATION + 'd' + month, val)]


def today_is_easter(year, month, day):
    switcher = {
        # '2020': y2020(month, day),
        '2021': y2021(month, day),
        '2022': y2022(month, day),
        '2023': y2023(month, day),
        '2024': y2024(month, day),
        '2025': y2025(month, day),
        '2026': y2026(month, day),
        '2027': y2027(month, day),
        '2028': y2028(month, day),
        '2029': y2029(month, day),
        '2030': y2030(month, day),
    }
    return switcher.get(year, False)


def y2021(month, day):
    if month == '04' and day == '04':
        return True
    return False


def y2022(month, day):
    if month == '04' and day == '17':
        return True
    return False


def y2023(month, day):
    if month == '04' and day == '09':
        return True
    return False


def y2024(month, day):
    if month == '03' and day == '31':
        return True
    return False


def y2025(month, day):
    if month == '04' and day == '20':
        return True
    return False


def y2026(month, day):
    if month == '04' and day == '05':
        return True
    return False


def y2027(month, day):
    if month == '03' and day == '28':
        return True
    return False


def y2028(month, day):
    if month == '04' and day == '16':
        return True
    return False


def y2029(month, day):
    if month == '04' and day == '01':
        return True
    return False


def y2030(month, day):
    if month == '04' and day == '21':
        return True
    return False

###################################
# # PROGRAM EXECUTION BEGINS HERE ##
###################################

stormcal()
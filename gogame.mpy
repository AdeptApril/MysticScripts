# -*- coding: CP437 -*-

class BoardPosition:
	'Simple 0-based set of ints to represent a board position'
	
	def __init__(self, col, row):
		self.col = col
		self.row = row

	#Compare objects correctly -- BoardPositions with same row and col are the same
	def __eq__(self, other):
		if not isinstance(other, BoardPosition):
			return NotImplemented

		return self.col == other.col and self.row == other.row
		
	def __hash__(self):
		#Using eq makes this unhashable. Since these are objects designed not to change, the following should be okay:
		return hash((self.col, self.row))
		
##############################################################
## INITIALIZE BBS FUNCTIONS AND DEFINE ANY GLOBAL VARIABLES ##
##############################################################

import os
from os import listdir
import time
from datetime import datetime
from os.path import isfile, join
from gomill import sgf
from mystic_bbs import *
import random
import Queue
import copy

KEY_UP       = chr(72)       # Some keyboard code defines returned by input functions
KEY_DOWN     = chr(80)
KEY_ESCAPE   = chr(27)
KEY_ENTER    = chr(13)
KEY_TAB      = chr(9)
KEY_LEFT     = chr(75)
KEY_RIGHT    = chr(77)
TURN_COLOR_X = 33
TURN_COLOR_Y = 1
MESSAGE_POS_X = 27			#Where to place the message on the screen
MESSAGE_POS_Y = 2
EXAMPLES_DIR = "doors/go/examples/"
GAMES_DIR = "doors/go/games/"

thisuser = getuser(0);    # read the currently logged in user into thisuser

def load_game():
	# Step: Load list of SGF files from /games directory
	
	gotoxy(1, 1)
	writeln("|CL|15|16Previous games")
	example_files = [f for f in listdir(GAMES_DIR) if isfile(join(GAMES_DIR, f))]
	num_of_example_files = 1
	for filename in example_files:
		gotoxy(1, 1+num_of_example_files)
		write("|15|16" + str(num_of_example_files) + ". " + str(filename) )
		num_of_example_files = num_of_example_files+1
	#games = []#sgf for sgf in example_files]
	num = choose_game_number(num_of_example_files)
	if(num is None):
		return
	with open(GAMES_DIR + example_files[num-1]) as gamefile:
		sgf_str ="".join(line for line in gamefile)
		#sgf_str ="".join(line.rstrip() for line in gamefile) #Not sure if line stripping is at all necessary
	game = sgf.Sgf_game.from_string(sgf_str)
	write("|15|16" + str(game.get_root()) + "|PA")
	play_go(game)
	
	gotoxy(1, 23)
	write("|15|16|PA")
	return

def example_game():
	# Step: Load list of SGF files from /example directory - Done. In example_files
	# Step: Load SGF file - Done
	# Step: Display starting board, with a pause - Done, I think. Not sure what pause I meant
	# Step: Display player names - Done
	# Step: Go through game a move at a time, pausing after each move - Done
	# Step: Allow 'Q' to quit - done
	# Step: Make it possible to unplace a stone (Both on the display and the internal representation.
	# Step: keys to jump forward/backward 10 moves, to the beginning/end
	# Step: Have a legend of some sort for keys. Assuming 'q', left, right, and maybe 'b' and 'e' for beginning and end?
	# Step: Commentary (not sure if there's commentary in the SGF file, but at least something saying, "Game ended here, white won" - currently it does say that the game is over.
	# Known problems:
	# Games list will likely bug out over 22 or 23 entries due to screen length
	
	gotoxy(1, 1)
	writeln("|CL|15|16Example games")
	example_files = [f for f in listdir(EXAMPLES_DIR) if isfile(join(EXAMPLES_DIR, f))]
	num_of_example_files = 1
	for filename in example_files:
		gotoxy(1, 1+num_of_example_files)
		write("|15|16" + str(num_of_example_files) + ". " + str(filename) )
		num_of_example_files = num_of_example_files+1
	#games = []#sgf for sgf in example_files]
	num = choose_game_number(num_of_example_files)
	if(num is None):
		return
	with open(EXAMPLES_DIR + example_files[num-1]) as gamefile:
		sgf_str ="".join(line for line in gamefile)
		#sgf_str ="".join(line.rstrip() for line in gamefile) #Not sure if line stripping is at all necessary
	game = sgf.Sgf_game.from_string(sgf_str)
	write("|15|16" + str(game.get_root()) + "|PA")
	play_go(game)
	
	gotoxy(1, 23)
	write("|15|16|PA")
	return

def choose_game_number(maxint):
	successful = False
	num = 0
	while(not successful):
		gotoxy(1,22) #TODO: get rid of the magic numbers
		write('|15|16Which game would you like to review? ')
		try:
			num = getstr(11, 23, 120, "1") #How exactly does the 11, 23 affect things? It affects the text box, but how?
			if(num is 'Q' or num is 'q'):
				return None
			else:
				num = int(num)
			if(num < 1 or num > maxint):
				gotoxy(1,22) #TODO: get rid of the magic numbers
				write("That number isn't in the list.|PA")
			else:
				successful = True
		except ValueError:
			gotoxy(1,22) #TODO: get rid of the magic numbers
			write("Please choose a number. Try again.|PA")
	return num

################################
## CUSTOM FUNCTION: Go ##
################################
# Attempting to make a correspondance Go (Weiqi, Baduk) program
# First step: Display Go board of a certain size - Done
# Second step: Display black pieces on board when given coordinates - Done
# Step: switch color after each move - done
# Step: Keep track of current board position - done
# Step: See if piece already placed at requested location - done
# Step: See if piece placed on empty square is a legal move - done
# Step: Deal with Ko - done
# Step: Allow for local play of the game - Done? Game is playable at this point, though it doesn't end.
# Step: Make the game be over after consecutive passes. - Not really done - just displays a message
# Step: keep track of moves in game - perhaps use SGF format - Done
# Step(s): Play against other users
# Step(s): Keep data on april.tech or otherwise do inter-BBS communications
# Step (repeated): break out code into additional class(es)
# Known issues:
# Not currently dealing with Komi
# Passes are not being added to the .sgf
# After the game is done being replayed, it goes into being a regular game, and creates a new save file. Not sure what the behavior _should_ be.
def play_go(game):
	replaying_game = False
	
	if(game == None):
		player_white = thisuser["handle"] #TODO - Make these assigned when setting up the game.
		player_black = thisuser["handle"] #TODO - possibly make them variables to pass in to the go game, rather than global vars
		write('|CL|CR|09What is the width of the board? ')
		width = request_board_size()
		game = sgf.Sgf_game(width)
		node = game.get_last_node()
		node.set('PB', player_black)
		node.set('PW', player_white)
				
	else:
		replaying_game = True
		width = game.get_size()
		game_iter = game.main_sequence_iter()
		player_white = game.get_player_name('w')
		player_black = game.get_player_name('b')
		
	write("|00|16|CL")

	baseboard = display_base_board(width) #baseboard is the ANSI characters for the board (and just where the stones go)
	#gameboard has 'n' for no stone/nothing, 'b' for black stone, and 'w' for white stone
	gameboard = [['n' for i in range(width)] for j in range(width)]
	gameboard_older = copy.deepcopy(gameboard) #older and oldest are used for determining Ko
	gameboard_oldest = copy.deepcopy(gameboard_older) #TODO: Maybe grab older at a different point, call it gameboard_Ko_check, and reduce the amount of copies.
	color_of_move = "black" #Could probably do a boolean switch (color_of_move = !color_of_move), but not sure how Python handles that.
	last_move_was_a_pass = False #If a pass happens and this is True, the game is over
	while(True):
		display_current_player_and_color(player_white, player_black, color_of_move)
		if(replaying_game):
			next_item = next(game_iter, None)
			if(next_item is None):
				move_pos = None
				end_game()
			else:
				move_pos = next_item.get_move()
			while(move_pos is not None and move_pos[0] is None):
				move_pos = next(game_iter).get_move()
			if(move_pos == None): #TODO on how to handle this. I thought it was just a pass, but I think it might be the end of the game play. Or might never be reached.
				replaying_game = False
			elif(move_pos[0] is None or move_pos[1] is None):
				move_pos = 'P'
			else:
				move_pos = chr(64+move_pos[1][0] + 1) + str(move_pos[1][1] + 1) #Convert to be the same as would be entered on the game screen.
		if(not replaying_game):
			move_pos = wipe_message_and_get_move()
		
		#Dealing with quitting the program
		if(move_pos == 'Q'):
			if(game is not None):
				with open(GAMES_DIR + "StormGame" + str(datetime.today().year) + str(datetime.today().month) + str(datetime.today().day) + str(datetime.today().hour) + str(datetime.today().minute) + str(datetime.today().second) + ".sgf", "w") as file:
					file.write(game.serialise())
			break
		#Dealing with Passing
		elif(move_pos == 'P' and not replaying_game):
			if(last_move_was_a_pass):
				end_game()
			last_move_was_a_pass = True
			color_of_move = change_turn(color_of_move)
			continue
		col = move_pos[0]
		row = move_pos[1:]
		#if outside bounds, continue loop
		#TODO: Deal with bad input somehow. Maybe a try/catch?
		if(ord(col) - 64 < 1 or ord(col) - 64 > width or int(row) < 1 or int(row) > width):
			gotoxy(MESSAGE_POS_X,MESSAGE_POS_Y)
			write("Position not on board. Please try another       ")
			continue
		#writeln("Move position: " + col + " " + row)
		if(is_legal_move(gameboard, gameboard_oldest, width, color_of_move[0], ord(col) - 64 - 1, int(row)-1)):
			last_move_was_a_pass = False
			if(did_capture(gameboard, width, color_of_move[0], ord(col) - 64 - 1, int(row)-1)):
				gotoxy(MESSAGE_POS_X, MESSAGE_POS_Y)
				if(color_of_move is "black"):
					write("|15|16Black has captured white stone(s)")
				else:
					write("|15|16White has captured black stone(s)")
			place_stone(int_to_2str(ord(col) - 64), int_to_2str(int(row)), color_of_move)
			gameboard[ord(col) - 64 - 1][int(row)-1] = color_of_move[0] #board is base-0, color_of_move[0] should be 'b' or 'w'
			node = game.extend_main_sequence()
			node.set_move(color_of_move[0], (ord(col) - 64 - 1, int(row)-1))
			#Could set a comment here by using if(move_info.comment is not None): node.set*"C", move_info.comment
			gameboard = remove_captured_stones(gameboard, width, color_of_move[0], ord(col) - 64 - 1, int(row)-1, baseboard)
			gameboard_oldest = copy.deepcopy(gameboard_older) #Prepare for Ko checks next time around
			gameboard_older = copy.deepcopy(gameboard)
			color_of_move = change_turn(color_of_move)
		
		if(replaying_game):
			gotoxy(79, 23) #Hitting right is putting an 'm'. Probably could delete the character through some backspace function, but maybe this is fine?
			char = onekey(KEY_RIGHT + "Q", True)

			if char == "Q":
				break
				
			if char == KEY_RIGHT:
				continue

def end_game():
	#Not Quite sure how I want to handle this, yet.
	gotoxy(MESSAGE_POS_X,MESSAGE_POS_Y)
	write("Game over, ma'am! Hit Q to quit.                       ")
	return

def wipe_message_and_get_move():
	while(True):
		gotoxy(27, 1)
		move_pos = getstr(11, 5, 5, "A1")
		gotoxy(MESSAGE_POS_X, MESSAGE_POS_Y) #Wiping out any previous message
		write("|15|16                                                      ")
		
		#Deal with irregularities
		if(move_pos == None):
			continue
			
		return move_pos.upper()

def display_current_player_and_color(player_white, player_black, color_of_move):
	gotoxy(TURN_COLOR_X, TURN_COLOR_Y)
	write("|15|16                                                ")
	gotoxy(TURN_COLOR_X, TURN_COLOR_Y)
	if(color_of_move is "black"):
		write("|00|23" + player_black + "'s (Black's) turn")
	else:
		write("|15|16" + player_white + "'s (White's) turn")

def request_board_size():
	successful = False
	width = 0
	while(not successful):
		write('|CL|CR|09What is the width of the board? ')
		try:
			width = int(getstr(11, 40, 120, "9"))
			if(width < 3 or width > 23):
				gotoxy(1,3) #TODO: get rid of the magic numbers
				write("Board size should be between 3 and 23. Try again.|PA")
			else:
				successful = True
		except ValueError:
			gotoxy(1,3) #TODO: get rid of the magic numbers
			write("Board size should be a number. Try again.|PA")
	return width
				

################################################################
## Change turn                                                ##
################################################################
 
def change_turn(color):
	if(color == "black"):
		return "white"
	else:
		return "black"

################################################################
## Remove captured stones                                     ##
################################################################
#board is 2D array of 'n', 'b', or 'w' for whatever is on that spot on the board. 0-based
#width is width of board
#color should be 'n', 'b', or 'w' - and is the capturing color
#col and row are ints, already turned into 0-base for the board.
#baseboard is the board with ANSI characters to replace the removed stones
def remove_captured_stones(board, width, color, col, row, baseboard):
	#check left
	if(col-1 >= 0):
		result = check_for_capture(board, width, color, col-1, row)
		if(result == True):
			explored = set()
			explored.add(BoardPosition(col, row))
			q=Queue.Queue()
			q.put(BoardPosition(col-1, row))
			board = modify_board(q, board, baseboard, color, width)
	
	#check right
	if(col+1 < width):
		result = check_for_capture(board, width, color, col+1, row)
		if(result == True):
			explored = set()
			explored.add(BoardPosition(col, row))
			q=Queue.Queue()
			q.put(BoardPosition(col+1, row))
			board = modify_board(q, board, baseboard, color, width)
			
	#check up
	if(row-1 >= 0):
		result = check_for_capture(board, width, color, col, row-1)
		if(result == True):
			explored = set()
			explored.add(BoardPosition(col, row))
			q=Queue.Queue()
			q.put(BoardPosition(col, row-1))
			board = modify_board(q, board, baseboard, color, width)
			
	#check down
	if(row+1 < width):
		result = check_for_capture(board, width, color, col, row+1)
		if(result == True):
			explored = set()
			explored.add(BoardPosition(col, row))
			q=Queue.Queue()
			q.put(BoardPosition(col, row+1))
			board = modify_board(q, board, baseboard, color, width)

	return board

def modify_board(q, board, baseboard, color, width):
	explored = set()
	while(not q.empty()):
		boardPos = q.get()
		if(boardPos in explored):
			continue
		c = getattr(boardPos, 'col')
		r = getattr(boardPos, 'row')
		explored.add(boardPos)
		#continue if opponent color...
		if(board[c][r] == color):
			continue
		#...or else add possible spaces if self color
		#Also, remove stones from board - both the structure and the screen
		else:
			board[c][r] = 'n'
			#Screen is base 1, baseboard and board are base 0
			if(baseboard != None): #When checking for Ko, a board object is modified here, and I don't want the on-screen board modified
				write('|[X' + int_to_2str(c+1) + '|[Y' + int_to_2str(int(r+1)) + baseboard[c][r])
			if(c-1 >= 0 and BoardPosition(c-1, r) not in explored):
				q.put(BoardPosition(c-1, r))
			if(r-1 >= 0 and BoardPosition(c, r-1) not in explored):
				q.put(BoardPosition(c, r-1))
			if(c+1 < width and BoardPosition(c+1, r) not in explored):
				q.put(BoardPosition(c+1, r))
			if(r+1 < width and BoardPosition(c, r+1) not in explored):
				q.put(BoardPosition(c, r+1))	
	return board

################################################################
## Check if move is legal given board, color, and position ##
################################################################
# Returns True if move is legal
# returns False otherwise, with some text printed out explaining why
#board is 2D array of 'n', 'b', or 'w' for whatever is on that spot on the board. 0-based
#width is width of board
#color should be 'n', 'b', or 'w'
#col and row are ints, already turned into 0-base for the board.
def is_legal_move(board, board_oldest, width, color, col, row):
	#Not allowed: placing on top of already-placed piece
	if(board[col][row] != 'n'):
		gotoxy(MESSAGE_POS_X,MESSAGE_POS_Y)
		write("Stone already there. Choose another position.       ")
		return False
	#Check to see if it's suicide
	else:
		explored = set()
		explored.add(BoardPosition(col, row))
		q=Queue.Queue()
		if(col-1 >= 0):
			q.put(BoardPosition(col-1, row))
		if(row-1 >= 0):
			q.put(BoardPosition(col, row-1))
		if(col+1 < width):
			q.put(BoardPosition(col+1, row))
		if(row+1 < width):
			q.put(BoardPosition(col, row+1))
		while(not q.empty()):
			boardPos = q.get()
			c = getattr(boardPos, 'col')
			r = getattr(boardPos, 'row')
			explored.add(boardPos)
			#Check if space open - if so, move is legal, as it's a liberty
			if(board[c][r] == 'n'):
				return True
			#If space not open, continue if opponent color...
			elif(board[c][r] != color):
				continue
			#...or else add possible spaces if self color
			else:
				if(c-1 >= 0 and BoardPosition(c-1, r) not in explored):
					q.put(BoardPosition(c-1, r))
				if(r-1 >= 0 and BoardPosition(c, r-1) not in explored):
					q.put(BoardPosition(c, r-1))
				if(c+1 < width and BoardPosition(c+1, r) not in explored):
					q.put(BoardPosition(c+1, r))
				if(r+1 < width and BoardPosition(c, r+1) not in explored):
					q.put(BoardPosition(c, r+1))	
			
		#If it gets here, it's either a capture, or suicide
		#Check if it'd capture, and thus not be suicide.
		if(did_capture(board, width, color, col, row)):
			#TODO: Check if it's Ko
			temp = copy.deepcopy(board)
			#The Ko rule comes into effect if placing the piece results in the board being the same state as it was
			#after the previous same-color turn.
			temp = remove_captured_stones(temp, width, color, col, row, None)
			#Check to see if the after-capture board has returned the board to the state it was after this color's last turn
			for j in range(width):
				for i in range(width):
					if(temp[i][j] != board_oldest[i][j]):
						#gotoxy(27,3)
						#write("Not Ko. Intersection " + str(i) + " " + str(j) + " temp: " + temp[i][j] + " oldest: " + board_oldest[i][j])
						return True
			#if it reaches here, it's a Ko situation
			gotoxy(MESSAGE_POS_X,MESSAGE_POS_Y)
			write("Ko rule. You must go elsewhere this turn.             ")
			#Undoing what did_capture did, I think. This is still very much a kludge, and I hate it.
			#But without this, somehow a stone still gets placed.
			#TODO: Make this be less terrible. A good solution might mess other things up, though.
			board[col][row] = 'n'
			return False
			
		#If it gets here, it's a suicidal position
		gotoxy(MESSAGE_POS_X,MESSAGE_POS_Y)
		write("That move would be suicide. Choose another position.")
		return False

def did_capture(board, width, color, col, row):
	#board is 2D array of 'n', 'b', or 'w' for whatever is on that spot on the board. 0-based
	#width is width of board
	#color should be 'n', 'b', or 'w', and be the capturing color
	#col and row are ints, already turned into 0-base for the board.
	#board[c][r] != color
	
	#Assuming Python is pass by value, messing with the board here should be fine.
	#However, if this turns into updating the board, too, might have to unwind this placing of a stone.
	#...and this seemed to cause issues, so perhaps this is being pass by reference?
	board[col][row] = color
	
	#check left
	if(col-1 >= 0):
		result = check_for_capture(board, width, color, col-1, row)
		if(result == True):
			#revert the board because this otherwise messes things up when checking for Ko
			#board[col][row] = 'n'
			return True
	
	#check right
	if(col+1 < width):
		result = check_for_capture(board, width, color, col+1, row)
		if(result == True):
			#revert the board because this otherwise messes things up when checking for Ko
			#board[col][row] = 'n'
			return True
			
	#check up
	if(row-1 >= 0):
		result = check_for_capture(board, width, color, col, row-1)
		if(result == True):
			#revert the board because this otherwise messes things up when checking for Ko
			#board[col][row] = 'n'
			return True
			
	#check down
	if(row+1 < width):
		result = check_for_capture(board, width, color, col, row+1)
		if(result == True):
			#revert the board because this otherwise messes things up when checking for Ko
			#board[col][row] = 'n'
			return True
	
	#Gets here, no capture, and thus it's suicide.
	#reverting the board because it was causing issues where it wouldn't display a piece there
	#when saying it's suicide, but it'd put a stone there anyway. This was unexpected behavior.
	board[col][row] = 'n'
	return False

def check_for_capture(board, width, color, col, row):
	#color is the _capturing_ color (just first letter)
	#starting position is the place that'll possibly be captured
	#if adjacent intersection has no stone, return false
	#if adjacent intersection has stone of capturing color, don't add to the queue
	
	explored = set()
	q=Queue.Queue()
	q.put(BoardPosition(col, row))
	#i = 3
	opponentColorFound = False
	while(not q.empty()):
		boardPos = q.get()
		c = getattr(boardPos, 'col')
		r = getattr(boardPos, 'row')
		explored.add(boardPos)
		#Check if space open - if so, it's a liberty, and not a capture in this direction
		if(board[c][r] == 'n'):
			return False
		#If space not open, continue if capturing color...
		elif(board[c][r] == color):
			#gotoxy(27,i) #Magic numbers, here, but just for debugging
			#i = i + 1
			#write("c: " + str(c) + " r: " + str(r) + " is capturing color")
			continue
		#...or else add possible spaces if self color
		else:
			opponentColorFound = True
			if(c-1 >= 0 and BoardPosition(c-1, r) not in explored):
				q.put(BoardPosition(c-1, r))
			if(r-1 >= 0 and BoardPosition(c, r-1) not in explored):
				q.put(BoardPosition(c, r-1))
			if(c+1 < width and BoardPosition(c+1, r) not in explored):
				q.put(BoardPosition(c+1, r))
			if(r+1 < width and BoardPosition(c, r+1) not in explored):
				q.put(BoardPosition(c, r+1))
				
	#If they ever ran into the other color, and
	#if the queue is empty, and no open space has been reached, capture has happened
	if(opponentColorFound):
		return True
	else:
		return False

####################################################
## Place stone by outputting the appropriate ANSI ##
####################################################
def place_stone(col, row, color):
	gotoxy(MESSAGE_POS_X,MESSAGE_POS_Y)
	#write("Move position: " + color + " at " + col + " " + row + "                       ")
	if(color == "black"):
		write('|[X' + col + '|[Y' + row + '|22|00' + chr(254))
	elif(color == "white"):
		write('|[X' + col + '|[Y' + row + '|22|15' + chr(254))

################################################################
## Display base board and return 2D array of the visual board ##
################################################################
def display_base_board(width):
	#Start with a board that has the ┼ character, along with the specified ANSI colors
	#board is 0-based, display is 1-based
	board = [["|00|22" + chr(197) for i in range(width)] for j in range(width)]
	n = width
	row = 1
	col = 1
	count = 0

	#Run through the various possibilities, assigning as needed, both writing it to the screen and to the board object
	while(row <= n+1):
		#larger boards should not have the spaces and - characters
		count = count + 1
		#last letter in the bottom row
		if(row == n+1 and col == n):
			writeln(chr(ord('A') + col - 1))
		#last row (all letters)
		elif(row == n+1):
			write(chr(ord('A') + col - 1))
		#top-left corner
		elif( row == 1 and col == 1):
			write("|00|22" + chr(218))
			board[col-1][row-1] = "|00|22" + chr(218)
		#top-right corner of board
		elif( row == 1 and col == n):
			writeln("|00|22" + chr(191) + str(row))
			board[col-1][row-1] = "|00|22" + chr(191)
		#bottom-left corner of board
		elif( row == n and col == 1):
			write("|00|22" + chr(192))
			board[col-1][row-1] = "|00|22" + chr(192)
		#bottom-right corner of board
		elif( row == n and col == n):
			writeln("|00|22" + chr(217) + str(row))
			board[col-1][row-1] = "|00|22" + chr(217)
		#bottom row, normal column of board
		elif( row == n):
			write("|00|22" + chr(193))
			board[col-1][row-1] = "|00|22" + chr(193)
		#top row, normal column of board
		elif( row == 1 ):
			write("|00|22" + chr(194))
			board[col-1][row-1] = "|00|22" + chr(194)
		#right side
		elif( col == n):
			writeln("|00|22" + chr(180) + str(row))
			board[col-1][row-1] = "|00|22" + chr(180)
		#left side
		elif( col == 1):
			write("|00|22" + chr(195))
			board[col-1][row-1] = "|00|22" + chr(195)
		#normal row/column
		else:
			write("|00|22" + chr(197))
			#board[col-1][row-1] = "|00|22" + chr(197) #This was already written when initializing board.
			
		#move on to the next character
		col = col + 1
		if(col > n):
			#writeln()
			col = 1
			row = row + 1
	return board

########################################
## Convert int into to 2-digit string ##
########################################

#Convert int to 2-digit string
#This is used for positioning on the screen, as pipe codes allow choosing cursor location with X## and Y## text
def int_to_2str(num):
	if(num < 10):
		return '0' + str(num)
	else:
		return str(num)

################################
## CUSTOM FUNCTION: MAIN MENU ##
################################

def show_main_menu():

	while not shutdown():

		writeln("|15|16|CL|17 BBS Go/Weiqi/Baduk > Main Menu|$X79 |16")

		writeln("|CR|15Hello, |14" + thisuser["handle"] + " #" + str(thisuser["id"]) + "|15!  Please select one of the following options:|CR")
		writeln("  |09(|11S|09) Single-player, no AI Game (" + thisuser["handle"] + " will be both players)")
		writeln("  |09(|11E|09) Example Games")
		writeln("  |09(|11L|09) Load ongoing or previous games")
		write  ("|CREnter option (|11Q|09/|11Quit|09): |11")

		# get one character input using defined list of valid keys

		char = onekey("ELSQ", True)

		if char == "Q":
			break

		if char == "S":
		    play_go(None)
			
		if char == "E":
			example_game()
			
		if char == "L":
			load_game()

###################################
## PROGRAM EXECUTION BEGINS HERE ##
###################################

show_main_menu()

writeln("|CR|14Program Ended! |PA");
